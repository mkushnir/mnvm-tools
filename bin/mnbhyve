#!/usr/bin/env python

import argparse
import os
import re
import sys
import subprocess
import time

bhyvectl = '/usr/sbin/bhyvectl'
bhyveload = '/usr/sbin/bhyveload'
bhyve = '/usr/sbin/bhyve'
args = None
_run_command = None


def _dryrun_command(*a):
    print("Running:", ' '.join(a))


def _run_command_capture(*a):
    if args.verbose:
        print("Running:", ' '.join(a))
    p = subprocess.Popen(a, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    _stdout, _stderr = p.communicate()
    return p, _stdout.strip()


def _run_command_pass_through(*a):
    if args.verbose:
        print("Running:", ' '.join(a))
    p = subprocess.Popen(a)
    p.communicate()
    return p, ''


def safestr(s):
    if s:
        return str(s)
    return ''


def vm_load(*a):
    name = a[-1]
    if args.dryrun:
        _dryrun_command(bhyveload, *(safestr(i) for i in a))
        return -1
    else:
        p, out = _run_command(bhyveload, *(safestr(i) for i in a))
        return p.returncode

def vm_run(*a):
    name = a[-1]
    if args.dryrun:
        _dryrun_command(bhyve, *(safestr(i) for i in a))
        return -1
    else:
        p, out = _run_command(bhyve, *(safestr(i) for i in a))
        return p.returncode


re_inout = re.compile(r'^.*\s0$')
re_vmx = re.compile(r'^.*\s0x1$')
re_spin_up = re.compile(r'^.*\s0xa$')
re_running = re.compile(r'^.*\s0xc$')
re_exited = re.compile(r'^.*\s0x1e$')
re_unknown = re.compile(r'^.*\s(\S+)$')
def vm_status(name):
    p, out = _run_command(bhyvectl, '--vm=%s' % name, '--get-exit-reason')
    out = out.decode('utf-8')
    if re_inout.match(out):
        return 'inout'
    elif re_vmx.match(out):
        return 'vmx'
    elif re_spin_up.match(out):
        return 'spin-ap'
    elif re_running.match(out):
        return 'running'
    elif re_exited.match(out):
        return 'exited'
    else:
        m = re_unknown.match(out)
        if m:
            return 'unknown[%s]' % m.group(1)
        else:
            return 'unknown[%s]' % out


def vm_reset(name):
    if args.dryrun:
        _dryrun_command(bhyvectl, '--vm=%s' % name, '--force-reset')
    else:
        _run_command(bhyvectl, '--vm=%s' % name, '--force-reset')


def vm_poweroff(name):
    if args.dryrun:
        _dryrun_command(bhyvectl, '--vm=%s' % name, '--force-poweroff')
    else:
        _run_command(bhyvectl, '--vm=%s' % name, '--force-poweroff')


def vm_destroy(name):
    if args.dryrun:
        _dryrun_command(bhyvectl, '--vm=%s' % name, '--destroy')
    else:
        _run_command(bhyvectl, '--vm=%s' % name, '--destroy')


def build_bhyveload_args():
    res = []
    if args.loader:
        res.extend(['-l', args.loader])
    if args.loader_console:
        res.extend(['-c', args.loader_console])
    if args.loader_image:
        res.extend(['-d', args.loader_image])
    if args.loader_env:
        for i in args.loader_env:
            res.extend(['-e', i])
    res.extend(['-m', args.memory])
    res.append(args.name)
    return res

def build_bhyve_args(idx):
    busid = args.busid_start
    consid = 0
    pci_devices = ['0:0,hostbridge']

    res = ['-H', '-P', '-c', args.ncpu, '-m', args.memory]

    if args.lpc:
        for i in args.lpc:
            res.extend(['-l', i])

    if args.cdrom:
        if idx >= len(args.cdrom):
            opt = args.cdrom[-1]
        else:
            opt = args.cdrom[idx]
        if opt:
            pci_devices.append('%d:0,ahci-cd,%s' % (busid, opt))
            busid += 1

    if args.disk:
        for i in args.disk:
            pci_devices.append('%d:0,%s' % (busid, i))
            busid += 1

    if args.net:
        for i in args.net:
            pci_devices.append('%d:0,%s' % (busid, i))
            busid += 1

    if args.pci:
        for i in args.pci:
            pci_devices.append('%d:0,%s' % (busid, i))
            busid += 1

    assert (busid <= 31)
    pci_devices.append('31:0,lpc')

    for i in pci_devices:
        res.extend(['-s', i])

    if args.extra:
        for i in args.extra:
            pair = i.split(',', 1)
            if len(pair) == 2:
                res.extend(['-%s' % pair[0], pair[1]])
            else:
                res.append('-%s' % pair[0])

    res.append(args.name)
    return res


def main():
    global args, _run_command

    parser = argparse.ArgumentParser()
    parser.add_argument('--dryrun',
        action='store_true', help='Do not actually run commands')
    parser.add_argument('--verbose',
        action='store_true', help='Print out commands')
    parser.add_argument('--pass-through-output',
        action='store_true', default=False,
        help='Pipe output through.  Default is to capture.')

    parser.add_argument('--cdrom',
        action='append',
        help='CD ROM device specification (--disk ahci-cd specialization)',
        metavar='PATH')
    parser.add_argument('--disk',
        action='append',
        help='Hard disk device specification (--pci specialization)',
        metavar='EMUL,PATH')
    parser.add_argument('--net',
        action='append',
        help='Network device specification (--pci specialization)',
        metavar='EMUL,TAP,mac=MAC')
    parser.add_argument('--pci',
        action='append',
        help='PCI device specification', metavar='EMUL,CONF')
    parser.add_argument('--extra',
        action='append',
        help='bhyve extra option', metavar='ARG[,VAL...]')
    parser.add_argument('--busid-start',
        type=int, help='PCI bus ID start for devices',
        metavar='NUM', default=1)

    parser.add_argument('--lpc',
        action='append',
        help='LPC device specification', metavar='EMUL,CONF')
    parser.add_argument('--memory',
        action='store',
        help='Physical memory size', metavar='SIZE', default='512M')
    parser.add_argument('--ncpu',
        action='store', type=int,
        help='Number of CPUs', metavar='NUM', default=1)
    parser.add_argument('--pincpu',
        action='append',
        help='Virtual-to-host cpu pin', metavar='V:H', default=['0:0'])

    parser.add_argument('--loader',
        help='Loader program', metavar='PATH')

    parser.add_argument('--loader-console',
        help='Loader console device', metavar='PATH')

    parser.add_argument('--loader-image',
        help='Loader disk image device', metavar='PATH')

    parser.add_argument('--loader-env',
        action='append',
        help='Loader environment', metavar='NAME=VALUE')

    parser.add_argument('--status',
        action='store_true',
        help='Print status and exit')

    parser.add_argument('--reset',
        action='store_true', help='Reset')

    parser.add_argument('--poweroff',
        action='store_true', help='Power off')

    parser.add_argument('--destroy',
        action='store_true', help='Destroy')

    parser.add_argument('name',
        help='bhyve guest name', metavar='NAME')

    args = parser.parse_args()
    assert (args.busid_start > 0)

    if args.pass_through_output \
            and not args.status \
            or args.loader_image:
        _run_command = _run_command_pass_through
    else:
        _run_command = _run_command_capture

    if args.status:
        status = vm_status(args.name)
        print(status)
        return

    if args.reset:
        vm_reset(args.name)
        print("Reset", args.name)
        return

    if args.poweroff:
        vm_poweroff(args.name)
        print("Powered off", args.name)
        return

    if args.destroy:
        vm_destroy(args.name)
        print("Destroyed", args.name)
        return


    i = 0
    while True:
        if args.loader_image:
            bhyveload_args = build_bhyveload_args()
            rc = vm_load(*bhyveload_args)
            print('bhyveload returned with %d, continuing ...' % rc)

        bhyve_args = build_bhyve_args(i)
        try:
            rc = vm_run(*bhyve_args)
        except (KeyboardInterrupt, Exception):
            vm_destroy(args.name)
            raise

        if rc == 0:
            print('re-starting %s ...' % args.name)
            time.sleep(2)
        else:
            print('bhyve returned with %d, exiting ...' % rc)
            break
        i += 1


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("Exiting ...")
