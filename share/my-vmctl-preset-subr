#!/bin/sh

usage () {
    echo "Usage: `basename $0` [ install | run | base | configure ] IDX"
    echo "Usage: `basename $0` clone IDX TEMPLATE"
}


my_hostaddr () {
    if test -n "$MY_VMCTL_HOSTNAME"
    then
        host $MY_VMCTL_HOSTNAME | grep 'has address' | awk '{print $4;}'
    else
        host `hostname` | grep 'has address' | awk '{print $4;}'
    fi
}


var_required () {
    local _old_e
    _old_e=`set +o | grep errexit`
    set -e
    for i in "$@"
    do
        eval "test -n \"\$$i\"" || ( echo missing variable \$$i && false )
    done
    eval $_old_e
}


file_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -f \"$i\"" || ( echo missing file $i && false )
    done
    eval $_old_e
    eval $_old_p
}


cdev_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -c \"$i\"" || ( echo missing character device $i && false )
    done
    eval $_old_e
    eval $_old_p
}


dir_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -d \"$i\"" || ( echo missing directory $i && false )
    done
    eval $_old_e
    eval $_old_p
}


prog_required () {
    local _old_e
    _old_e=`set +o | grep errexit`
    set -e
    for i in "$@"
    do
        eval "/usr/bin/which \"$i\" >/dev/null 2>&1" || ( echo missing program $i && false )
    done
    eval $_old_e
}


getvol () {
    local _vol _name
    _name=$1
    _vol=$MY_VMCTL_DISK/$_name
    echo $_vol
}


getdataset () {
    local _dataset _name
    _name=$1
    _dataset=$MY_VMCTL_POOL/$_name
    echo $_dataset
}


newvol () {
    local _name _size _vol
    _name=$1
    _size=$2
    if test -n "$_zfs"
    then
        _vol=`getdataset $_name`
        zfs destroy $_vol
        zfs create -V $_size $_vol
        _vol=`getvol $_name`
    else
        _vol=`getvol $_name`
        rm -f $_vol
        truncate -s $_size $_vol
    fi
    echo $_vol
}


clone_dataset () {
    local _ddevbase _ddev

    if test ${mnvm_template_idx} -eq ${mnvm_idx}
    then
        echo "ERROR: Cannot clone template ${mnvm_template_idx} into itself.  Exiting ..."
        exit 1
    fi

    if test -n "${_zfs}"
    then
        _ddevbase=`getdataset $mnvm_diskbase`
        _ddev=`getdataset $mnvm_disk`

        var_required _ddevbase _ddev

        if ! zfs list "${_ddevbase}" >/dev/null 2>&1
        then
            echo "Invalid snapshot ${_ddevbase}"
            exit 1
        fi
        if zfs list "${_ddev}" >/dev/null 2>&1
        then
            if test -z "$mnvm_force"
            then
                echo "Already exists ${_ddev}. Set mnvm_force=1 in the preset file or run mnvmctl destroy-image ${_ddev}"
                exit 1
            else
                zfs destroy ${_ddev}
            fi
        fi
        zfs clone ${_ddevbase} ${_ddev}

    else
        _ddevbase=`getvol $mnvm_diskbase`
        _ddev=`getvol $mnvm_disk`

        var_required _ddevbase _ddev

        if ! test -f ${_ddevbase}
        then
            echo "Invalid snapshot ${_ddevbase}"
            exit 1
        fi
        if test -f "${_ddev}"
        then
            if test -z "$mnvm_force"
            then
                echo "Already exists ${_ddev}. Set mnvm_force=1 in the preset file or run mnvmctl destroy-image ${_ddev}"
                exit 1
            else
                rm -f -v ${_ddev}
            fi
        fi
        cp -f -v ${_ddevbase} ${_ddev}
    fi
}


base_dataset() {
    local _ddev _ddevbase

    if test -n "${_zfs}"
    then
        _ddevbase=`getdataset $mnvm_diskbase`

        var_required _ddevbase

        zfs snapshot ${_ddevbase}

    else
        _ddev=`getvol $mnvm_disk`
        _ddevbase=`getvol $mnvm_diskbase`

        var_required _ddevbase _ddev

        rm -f -v ${_ddevbase}
        ln ${_ddev} ${_ddevbase}
    fi
}


configure_freebsd () {
    local _vol _rootvol _mdev

    var_required mnvm_net mnvm_node_id

    _vol=`getvol $mnvm_disk`
    # GPT partitioning scheme assumed (bsdinstall option)
    if test -n "${_zfs}"
    then
        _rootvol="${_vol}p2"
    else
        _mdev=`mdconfig -a -t vnode -f ${_vol}`
        _rootvol="/dev/${_mdev}p2"
    fi
    cdev_required ${_rootvol}
    mount $_rootvol /mnt
    sed -E \
        -e "s/^mnvm_node_id=.*$/mnvm_node_id=$mnvm_node_id/" \
        -e "s/^mnvm_net=.*$/mnvm_net=$mnvm_net/" \
        -i.bak /mnt/etc/rc.conf
    umount /mnt
    if test -n "${_mdev}"
    then
        mdconfig -d -u ${_mdev}
    fi
}


configure_linux () {
    local _passwd _cdisk _mdev
    local _ifname _ip4 _ip4mask _ip4net _ip4bcast _ip4gway _ip4ns _hostname

    var_required mnvm_net mnvm_node_id

    _ifname=enp0s1
    _ifnameg='enp0s*'
    _ip4=${mnvm_net}.${mnvm_node_id}
    _ip4netlen=24
    _ip4mask=255.255.255.0
    _ip4net=${mnvm_net}.0
    _ip4bcast=${mnvm_net}.255
    _ip4gway=${mnvm_net}.10
    _ip4ns=10.1.1.10
    _hostname=`host $_ip4 | sed -n -e 's/.*domain name pointer \(.*\)\./\1/p'`
    var_required _hostname

    _cdisk="$MY_VMCTL_CFG/${mnvm_disk}.cfg"
    rm -f ${_cdisk}

    if test -n "$MY_VMCTL_CFG_NTFS3G"
    then
        prog_required mkntfs ntfs-3g

        truncate -s 16M ${_cdisk}
        mkntfs ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        ntfs-3g /dev/${_mdev} /mnt

    elif test -n "$MY_VMCTL_CFG_MSDOS"
    then
        newfs_msdos -S 512 -c 1 -C 33M -F 32 ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        mount_msdosfs /dev/${_mdev} /mnt

    else
        prog_required mkfs.ext2

        truncate -s 16M ${_cdisk}
        mkfs.ext2 ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        mount -t ext2fs /dev/${_mdev} /mnt
    fi

    mkdir -p /mnt/etc/network/ /mnt/etc/netplan/ /mnt/etc/sysconfig/network-scripts
    cat <<EOD >/mnt/etc/network/interfaces
source /etc/network/interfaces.d/*
auto lo
iface lo inet loopback
auto $_ifname
iface $_ifname inet static
  address $_ip4
  netmask $_ip4mask
  network $_ip4net
  brodcast $_ip4bcast
  gateway $_ip4gway
  dns-nameservers $_ip4ns
EOD

    cat <<EOD >/mnt/etc/netplan/01-netcfg.yaml
# crontab -e
# @reboot /usr/sbin/netplan apply
# @reboot /bin/hostname -F /etc/hostname
network:
    version: 2
    renderer: networkd
    ethernets:
        qwe:
            match:
                name: $_ifnameg
            addresses:
                - $_ip4/$_ip4netlen
            gateway4: $_ip4gway
            nameservers:
                search:
                    - local
                addresses:
                    - $_ip4ns
EOD

    cat <<EOD >/mnt/etc/sysconfig/network-scripts/ifcfg-eth0
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=eth0
DEVICE=eth0
IPADDR=$_ip4
NETMASK=$_ip4mask
NETWORK=$_ip4net
BROADCAST=$_ip4bcast
GATEWAY=$_ip4gway
DNS1=$_ip4ns
ONBOOT=yes
EOD

    echo ${_hostname} > /mnt/etc/hostname
    echo "HOSTANME=${_hostname}" > /mnt/etc/sysconfig/network

    #find /mnt -ls
    umount /mnt
    mdconfig -d -u ${_mdev}
}


run_simple_freebsd_preset () {
    local _cmd _ddev _hostaddr

    mnvmctl destroy $mnvm_name
    if test "$1" = "install"
    then
        var_required mnvm_iso
        _cmd=install-uefi
        _ddev=`newvol $mnvm_disk $mnvm_size`
        mnvm_iso="$MY_VMCTL_ISO/$mnvm_iso"
        file_required $mnvm_iso

    elif test "$1" = "run"
    then
        _cmd=run-uefi
        _ddev=`getvol $mnvm_disk`
        mnvm_iso=

    elif test "$1" = "clone"
    then
        clone_dataset
        configure_freebsd
        return $?

    elif test "$1" = "base"
    then
        base_dataset
        return $?

    elif test "$1" = "configure"
    then
        configure_freebsd
        return $?

    else
        usage
        return 1
    fi

    _hostaddr=`my_hostaddr`
    var_required _hostaddr
    mnvmctl -M1 $B_opt $_cmd "$mnvm_iso" "$_ddev" $mnvm_mac $mnvm_cdev $_hostaddr $mnvm_name
}


run_simple_linux_preset () {
    local _cmd _ddev _cdisk _hostaddr

    mnvmctl destroy $mnvm_name
    if test "$1" = "install"
    then
        local _mnvm_iso

        var_required mnvm_iso
        _cmd=install-uefi
        _ddev=`newvol $mnvm_disk $mnvm_size`
        _mnvm_iso="$MY_VMCTL_ISO/$mnvm_iso"
        file_required ${_mnvm_iso}
        mnvm_iso="${_mnvm_iso}|/dev/null"
        configure_linux

    elif test "$1" = "run"
    then
        _cmd=run-uefi
        _ddev=`getvol $mnvm_disk`
        mnvm_iso=

    elif test "$1" = "clone"
    then
        clone_dataset
        configure_linux
        return $?

    elif test "$1" = "base"
    then
        base_dataset
        return $?

    elif test "$1" = "configure"
    then
        configure_linux
        return $?

    else
        usage
        return 1
    fi

    _cdisk="$MY_VMCTL_CFG/${mnvm_disk}.cfg"

    #export DEBUG=yes
    _hostaddr=`my_hostaddr`
    var_required _hostaddr
    mnvmctl -M1 $B_opt $_cmd "$mnvm_iso" "$_ddev|${_cdisk}" $mnvm_mac $mnvm_cdev $_hostaddr $mnvm_name
}


run_simple_windows_preset () {
    local _cmd _ddev _hostaddr

    mnvmctl destroy $mnvm_name
    if test "$1" = "install"
    then
        local _mnvm_iso

        var_required mnvm_iso
        _cmd=install-windows
        _ddev=`newvol $mnvm_disk $mnvm_size`
        _mnvm_iso="$MY_VMCTL_ISO/$mnvm_iso"
        file_required ${_mnvm_iso}
        mnvm_iso="${_mnvm_iso}|/dev/null"

    elif test "$1" = "run"
    then
        _cmd=run-windows
        _ddev=`getvol $mnvm_disk`
        mnvm_iso=/dev/null

    else
        usage
        return 1
    fi

    #export DEBUG=yes
    _hostaddr=`my_hostaddr`
    var_required _hostaddr
    mnvmctl -M1 $B_opt $_cmd "$mnvm_iso" $_ddev $mnvm_mac $mnvm_cdev $_hostaddr $mnvm_name
}


# main

_zfs=
# pool: for zfs hosting
# MY_VMCTL_POOL=
# root dir: for ISO images
# MY_VMCTL_ISO=
# root dir: for cof images
# MY_VMCTL_CFG=
# dev dir: for disk devices
# MY_VMCTL_DISK=
B_opt=
if zpool list >/dev/null 2>&1
then
    if test -n "$MY_VMCTL_DDEV_ZFS"
    then
        _zfs=1
        B_opt=-b
        var_required MY_VMCTL_POOL MY_VMCTL_ISO MY_VMCTL_CFG MY_VMCTL_DISK
    else
        var_required MY_VMCTL_ISO MY_VMCTL_CFG MY_VMCTL_DISK
    fi
    dir_required $MY_VMCTL_ISO $MY_VMCTL_CFG $MY_VMCTL_DISK
fi

# Required variables:
#   idx, ordinal number
#   mnvm_tag, base/template image name like ubuntu-pear-16 or freebsd-pear-11
# prepare
mnvm_idx=$2
mnvm_template_idx=$3
: ${mnvm_idx:=0}
: ${mnvm_template_idx:=0}
mnvm_idx=$(($mnvm_idx_offset + $mnvm_idx))
mnvm_node_id=$(( 100 + $mnvm_idx ))

mnvm_template_idx=$(($mnvm_idx_offset + $mnvm_template_idx))
mnvm_template_node_id=$(( 100 + $mnvm_template_idx ))
var_required mnvm_idx mnvm_tag

# stage 1
mnvm_cdev="$mnvm_idx"
midx=`printf "%02x" $mnvm_idx`
mnvm_id=${mnvm_tag}.${midx}
template_midx=`printf "%02x" $mnvm_template_idx`
mnvm_template_id=${mnvm_tag}.${template_midx}
mnvm_name=vm-${mnvm_id}
idbase=${idbase:-${mnvm_template_id}@base}
mnvm_size=${mnvm_size:-'32G'}
mnvm_cpu=$mnvm_idx
mnvm_mac=58:9c:fc:ea:00:$midx
mnvm_disk=.diskdev-${mnvm_id}
mnvm_diskbase=.diskdev-${idbase}
