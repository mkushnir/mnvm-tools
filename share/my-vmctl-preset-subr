#!/bin/sh

my_hostname () {
    host `hostname`|awk '{print $4;}'
}


var_required () {
    local _old_e
    _old_e=`set +o | grep errexit`
    set -e
    for i in "$@"
    do
        eval "test -n \"\$$i\"" || ( echo missing \$$i && false )
    done
    eval $_old_e
}


file_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -f \"$i\"" || ( echo missing $i && false )
    done
    eval $_old_e
    eval $_old_p
}


cdev_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -c \"$i\"" || ( echo missing $i && false )
    done
    eval $_old_e
    eval $_old_p
}


dir_required () {
    local _old_e _old_p
    _old_e=`set +o | grep errexit`
    _old_p=`set +o | grep physical`
    set -e
    set -p
    for i in "$@"
    do
        eval "test -d \"$i\"" || ( echo missing $i && false )
    done
    eval $_old_e
    eval $_old_p
}


prog_required () {
    local _old_e
    _old_e=`set +o | grep errexit`
    set -e
    for i in "$@"
    do
        eval "/usr/bin/which \"$i\" >/dev/null 2>&1" || ( echo missing $i && false )
    done
    eval $_old_e
}


newvol () {
    local _dataset _vol _name _size
    _name=$1
    _size=$2
    _vol=$D/$_name
    if test -n "$_zfs"
    then
        _dataset=$P/$_name
        zfs destroy $_dataset
        zfs create -V $_size $_dataset
    else
        rm -f $_vol && truncate -s $_size $_vol
    fi
    echo $_vol
}


getvol () {
    local _vol _name
    _name=$1
    _vol=$D/$_name
    echo $_vol
}


getdataset () {
    local _dataset _name
    _name=$1
    _dataset=$P/$_name
    echo $_dataset
}


run_simple_linux_preset () {
    local _cmd _d _g _ddev _devmapi _devmapr _cdisk

    my-vmctl destroy $name

    _devmapi=device.map-${id}.install
    _devmapr=device.map-${id}.run

    if test "$1" = "install"
    then
        var_required iso
        _cmd=install-linux
        _ddev=`newvol $disk $size`
        if test -n "$grubi"
        then
            _g="-G $grubi"
        else
            _g=
        fi
        _d=$_devmapi
        configure_linux

    elif test "$1" = "run"
    then
        _cmd=run-linux
        _ddev=`getvol $disk`
        if test -n "$grubr"
        then
            _g="-G $grubr"
        else
            _g=
        fi
        _d=$_devmapr
        iso=

    elif test "$1" = "clone"
    then
        clone_zfs_dataset
        configure_linux
        return $?

    else
        return 1
    fi

    _cdisk="$R/${disk}.cfg"

    cat > device.map-${id}.install <<EOD
(cd0) $R/${iso}
(hd0) $D/${disk}
(hd1) ${_cdisk}
EOD

    cat > device.map-${id}.run <<EOD
(cd0) /fake
(hd0) $D/${disk}
(hd1) ${_cdisk}
EOD

    #export DEBUG=yes
    my-vmctl -M1 $B_opt $_cmd $_g $_d $iso "$_ddev|${_cdisk}" $mac $name $cdev
}


run_simple_freebsd_preset () {
    local _cmd _ddev

    my-vmctl destroy $name
    if test "$1" = "install"
    then
        var_required iso
        _cmd=install
        _ddev=`newvol $disk $size`

    elif test "$1" = "run"
    then
        _cmd=run
        _ddev=`getvol $disk`
        iso=

    elif test "$1" = "clone"
    then
        clone_zfs_dataset
        configure_freebsd
        return $?

    else
        return 1
    fi

    my-vmctl -M1 $B_opt $_cmd $iso $_ddev $mac $name $cdev
}


run_simple_windows_preset () {
    local _cmd _ddev _hostname

    my-vmctl destroy $name
    if test "$1" = "install"
    then
        var_required iso
        _cmd=install-windows
        _ddev=`newvol $disk $size`
    elif test "$1" = "run"
    then
        _cmd=run-windows
        _ddev=`getvol $disk $size`
        if test -z "$fakeiso"
        then
            fakeiso=.fakeiso-$name
        fi
        :> $fakeiso
        iso=$fakeiso
    else
        return 1
    fi

    #export DEBUG=yes
    _hostname=`my_hostname`
    var_required _hostname
    my-vmctl -M1 $B_opt $_cmd $bootrom $iso $mac $_ddev $_hostname $name 
}


run_simple_uefi_preset () {
    local _cmd _ddev _cdisk _hostname

    my-vmctl destroy $name
    if test "$1" = "install"
    then
        var_required iso
        _cmd=install-uefi
        _ddev=`newvol $disk $size`
        configure_linux

    elif test "$1" = "run"
    then
        _cmd=run-uefi
        _ddev=`getvol $disk $size`
        iso=

    elif test "$1" = "clone"
    then
        clone_zfs_dataset
        configure_linux
        return $?

    elif test "$1" = "configure"
    then
        configure_linux
        return $?

    else
        return 1
    fi

    _cdisk="$R/${disk}.cfg"

    #export DEBUG=yes
    _hostname=`my_hostname`
    var_required _hostname
    my-vmctl -M1 $B_opt $_cmd $iso "$_ddev|${_cdisk}" $mac $cdev $_hostname $name
}


clone_zfs_dataset () {
    local _ddevbase _ddev

    _ddevbase=`getdataset $diskbase`
    _ddev=`getdataset $disk`

    if ! zfs list "${_ddevbase}" >/dev/null 2>&1
    then
        echo "Invalid snapshot ${_ddevbase}"
        exit 1
    fi
    if zfs list "${_ddev}" >/dev/null 2>&1
    then
        if test -z "$force"
        then
            echo "Already exists ${_ddev}. Set force=1 in the preset file or run my-vmctl destroy-image ${_ddev}"
            exit 1
        else
            zfs destroy ${_ddev}
        fi
    fi
    zfs clone ${_ddevbase} ${_ddev}
}


configure_freebsd () {
    local _vol _rootvol

    var_required mnvm_net mnvm_node_id

    _vol=`getvol $disk`
    # GPT partitioning scheme assumed (bsdinstall option)
    _rootvol="${_vol}p2"
    cdev_required ${_rootvol}
    mount $_rootvol /mnt
    sed -E \
        -e "s/^mnvm_node_id=.*$/mnvm_node_id=$mnvm_node_id/" \
        -e "s/^mnvm_net=.*$/mnvm_net=$mnvm_net/" \
        -i.bak /mnt/etc/rc.conf
    umount /mnt
}


configure_linux () {
    local _passwd _cdisk _mdev
    local _ifname _ip4 _ip4mask _ip4net _ip4bcast _ip4gway _ip4ns _hostname

    var_required mnvm_net mnvm_node_id

    _ifname=enp0s1
    _ifnameg='enp0s*'
    _ip4=${mnvm_net}.${mnvm_node_id}
    _ip4netlen=24
    _ip4mask=255.255.255.0
    _ip4net=${mnvm_net}.0
    _ip4bcast=${mnvm_net}.255
    _ip4gway=${mnvm_net}.10
    _ip4ns=10.1.1.10
    _hostname=`host $_ip4 | sed -n -e 's/.*domain name pointer \(.*\)\./\1/p'`
    var_required _hostname

    _cdisk="$R/${disk}.cfg"
    rm -f ${_cdisk}

    if test -n "$MY_VMCTL_CFG_NTFS3G"
    then
        prog_required mkntfs ntfs-3g

        truncate -s 16M ${_cdisk}
        mkntfs ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        ntfs-3g /dev/${_mdev} /mnt

    elif test -n "$MY_VMCTL_CFG_MSDOS"
    then
        newfs_msdos -S 512 -c 1 -C 33M -F 32 ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        mount_msdosfs /dev/${_mdev} /mnt

    else
        prog_required mkfs.ext2

        truncate -s 16M ${_cdisk}
        mkfs.ext2 ${_cdisk}
        _mdev=`mdconfig -a -t vnode -f ${_cdisk}`
        mount -t ext2fs /dev/${_mdev} /mnt
    fi

    mkdir -p /mnt/etc/network/ /mnt/etc/netplan/ /mnt/etc/sysconfig/network-scripts
    cat <<EOD >/mnt/etc/network/interfaces
source /etc/network/interfaces.d/*
auto lo
iface lo inet loopback
auto $_ifname
iface $_ifname inet static
  address $_ip4
  netmask $_ip4mask
  network $_ip4net
  brodcast $_ip4bcast
  gateway $_ip4gway
  dns-nameservers $_ip4ns
EOD

    cat <<EOD >/mnt/etc/netplan/01-netcfg.yaml
network:
    version: 2
    renderer: networkd
    ethernets:
        qwe:
            match:
                name: $_ifnameg
            addresses:
                - $_ip4/$_ip4netlen
            gateway4: $_ip4gway
            nameservers:
                search:
                    - local
                addresses:
                    - $_ip4ns
EOD

    cat <<EOD >/mnt/etc/sysconfig/network-scripts/ifcfg-eth0
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=eth0
DEVICE=eth0
IPADDR=$_ip4
NETMASK=$_ip4mask
NETWORK=$_ip4net
BROADCAST=$_ip4bcast
GATEWAY=$_ip4gway
DNS1=$_ip4ns
ONBOOT=yes
EOD

    echo ${_hostname} > /mnt/etc/hostname
    echo "HOSTANME=${_hostname}" > /mnt/etc/sysconfig/network

    #find /mnt -ls
    umount /mnt
    mdconfig -d -u ${_mdev}

    #stty -echo
    #read -p "Password: " _passwd
    #stty echo
    #sed -e \
    #    "s/^mnvm_node_id=.*$/mnvm_node_id=$mnvm_node_id/" \
    #    -e "s/^__secure__:password$/__secure__:$_passwd/" \
    #        <my-vmctl-preset-config-ubuntu \
    #        > .my-vmctl-preset-config-ubuntu-tmp
    #my-vmctl send-script $cdev .my-vmctl-preset-config-ubuntu-tmp
    #rm .my-vmctl-preset-config-ubuntu-tmp
}


# main

_zfs=
# pool: for zfs hosting
P=
# root dir: for ISO images
R=
# dev dir: for disk devices
D=
B_opt=
if zpool list >/dev/null 2>&1
then
    if test -z "$MY_VMCTL_DDEV_UFS"
    then
        _zfs=1
        # my pear. hosting
        P=skyrta
        R=/$P/vm
        D=/dev/zvol/$P
        B_opt=-b
    else
        R="`pwd`"
        D="`pwd`"
    fi
fi

# Required variables:
#   idx, ordinal number
#   tag, base/template image name like ubuntu-pear-16 or freebsd-pear-11
var_required idx tag
cdev="$idx"
midx=`printf "%02x" $idx`
idbase=${idbase:-${tag}@base}
id=${tag}.${midx}
name=vm-${id}
size=32G
cpu=$idx
mac=58:9c:fc:ea:00:$midx
disk=.diskdev-${id}
diskbase=.diskdev-${idbase}
